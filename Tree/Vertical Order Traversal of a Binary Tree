/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        if(root==NULL)  return ans;
        
        // root, col, level;
        queue<pair<TreeNode*, pair<int, int>>>q;
        map<int, map<int, multiset<int>>> mp;
        q.push({root,{0,0}});

        while(!q.empty()){
            pair<TreeNode*, pair<int, int>> front = q.front();
            q.pop();
            
            TreeNode* currNode = front.first;
            int col = front.second.first;
            int level = front.second.second;
            mp[col][level].insert(currNode->val);
            if(currNode->left)  q.push({{currNode->left},{col-1,level+1}});
            if(currNode->right)  q.push({{currNode->right}, {col+1,level+1}});

        }
        for(auto it: mp){
            vector<int> temp;
            for(auto levels:it.second){
                auto mset = levels.second;
                temp.insert(temp.end(),mset.begin(),mset.end());
            }
            ans.push_back(temp);
        }
        return ans;

    }
};
